{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","data","setData","_useState3","_useState4","searchWord","setSearch","_useState5","_useState6","filter","setFilter","react_default","a","createElement","className","type","placeholder","onChange","e","target","value","onClick","Axios","get","concat","then","response","index_esm","size","defs","word","phonetic","index","i","meanings","length","partOfSpeech","definitions","definition","getFilteredSearch","getDefinitions","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.74f5cb7d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Axios from \"axios\";\nimport \"./App.css\";\nimport { FaSearch } from \"react-icons/fa\";\n\n\nfunction App() {\n\n  // initializing state for App with search data, search word, and filter status\n  const [data, setData] = useState(\"\");\n  const [searchWord, setSearch] = useState(\"\");\n  const [filter, setFilter] = useState(\"Filter Results...\");\n\n  // grabs the meaning of the searched word from dictionary API\n  function getMeaning() {\n    Axios.get(\n        `https://api.dictionaryapi.dev/api/v2/entries/en/${searchWord}`\n    ).then((response) => {\n      setData(response.data[0]);\n    });\n  }\n\n  // gets all definitions of the current search word\n  // if filters are on, calls getFilteredSearch() method\n  function getDefinitions() {\n    if (filter !== \"Filter Results...\") return getFilteredSearch();\n    const defs = [];\n    defs[0] = (<div>\n          <h2>\n            {data.word}{\" \"}\n          </h2>\n          <h5>{data.phonetic}</h5>\n        </div>\n    );\n    for (let i = 0; i < data.meanings.length; i++) {\n      defs[i + 1] = (<div className = \"definition\">\n        <h4>Parts of speech:</h4>\n\n        <p>{data.meanings[i].partOfSpeech}</p>\n\n        <h4>Definition:</h4>\n\n        <p>{data.meanings[i].definitions[0].definition}</p>\n      </div>);\n    }\n    if (defs.length === 1) return (<p>No Results Found</p>);\n    return (\n        <div>\n          <p>Showing {defs.length - 1} Result(s)</p>\n          {defs}\n        </div>\n    );\n  }\n\n  // gets all definitions that match the filter's state\n  function getFilteredSearch() {\n    const defs = [];\n    defs[0] = (<div>\n          <h2>\n            {data.word}{\" \"}\n          </h2>\n          <h5>{data.phonetic}</h5>\n        </div>\n    );\n    let index = 1;\n    for (let i = 0; i < data.meanings.length; i++) {\n      if (data.meanings[i].partOfSpeech === filter) {\n        defs[index] = (<div className = \"definition\">\n          <h4>Parts of speech:</h4>\n\n          <p>{data.meanings[i].partOfSpeech}</p>\n\n          <h4>Definition:</h4>\n\n          <p>{data.meanings[i].definitions[0].definition}</p>\n        </div>);\n        index++;\n      }\n    }\n    if (defs.length === 1) return (<p>No Results Found</p>);\n    return (\n        <div>\n          <p>Showing {defs.length - 1} Result(s)</p>\n          {defs}\n        </div>\n    );\n  }\n\n  // returns what will be rendered. Each className represents a different component of the program\n  return (\n      <div className=\"App\">\n        <h1>Dictionary</h1>\n        <div className=\"searchBox\">\n\n          <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              onChange={(e) => {\n                setSearch(e.target.value);\n              }}\n          />\n          <button\n              onClick={() => {\n                getMeaning();\n              }}\n          > <FaSearch size=\"20px\"/>\n          </button>\n        </div>\n        <div className = \"Filter\">\n          <select\n              value={filter}\n              onChange={(e) => {\n                setFilter(e.target.value);\n              }}\n          >\n            <option value=\"Filter Results...\">Filter Results...</option>\n            <option value=\"noun\">noun</option>\n            <option value=\"pronoun\">pronoun</option>\n            <option value=\"adjective\">adjective</option>\n            <option value=\"verb\">verb</option>\n            <option value=\"adverb\">adverb</option>\n            <option value=\"conjunction\">conjunction</option>\n            <option value=\"interjection\">interjection</option>\n            <option value=\"preposition\">preposition</option>\n          </select>\n        </div>\n        {data && (<div className=\"showResults\">\n              {getDefinitions()}\n            </div>\n        )}\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}